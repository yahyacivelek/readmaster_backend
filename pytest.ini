# pytest.ini
# This file configures Pytest for the Readmaster.ai project.

[pytest]
# Specifies the directory (or directories) where Pytest should look for tests.
testpaths = tests

# Patterns for test discovery. Pytest will look for files matching these patterns.
python_files = test_*.py

# Patterns for test class discovery.
python_classes = Test*

# Patterns for test function discovery.
python_functions = test_*

# Configures asyncio mode. 'auto' automatically handles asyncio tests
# without needing explicit asyncio markers if using pytest-asyncio.
asyncio_mode = auto

# --- Environment Variables for Tests ---
# Uncomment and set these if you need to override environment variables specifically for tests.
# This is often useful for setting a different database URL, API keys, or other configurations.
# Note: Variables set here override system environment variables during test runs.
# The `python-dotenv` package (if used) might also load a .env file,
# and pytest-dotenv can load .env.test or similar.
# Variables defined here take precedence over those in .env files loaded by pytest-dotenv.
env =
    # Ensures that the application's `src` directory is in the Python path,
    # allowing imports like `from readmaster_ai.main import app`.
    # The `prepend_sys_path = .` in alembic.ini and pyproject.toml's [tool.poetry.packages]
    # often handle this for Poetry-managed projects, but explicit PYTHONPATH can be a fallback.
    PYTHONPATH = .

    # Example: Override the database URL for tests.
    # This should match the TEST_DATABASE_URL used in tests/conftest.py if that logic
    # relies on os.getenv AFTER pytest has initialized its environment.
    # If conftest.py reads os.getenv at import time, this might not take effect as expected
    # unless pytest-dotenv or similar mechanism loads it earlier.
    # For now, TEST_DATABASE_URL in conftest.py has a hardcoded default and also checks os.getenv.
    # TEST_DATABASE_URL = postgresql+asyncpg://test_user:test_password@localhost:5432/readmaster_test_db

    # Example: Override JWT secret key for tests for predictability if needed.
    # JWT_SECRET_KEY = "a_very_secure_and_different_test_secret_key"

    # Example: Set a specific environment mode if your app behaves differently based on it.
    # APP_ENV = "test"

# --- Logging Configuration (Optional) ---
# You can configure logging levels and formats for tests if default logging is too verbose or not enough.
# log_cli = true
# log_cli_level = INFO
# log_cli_format = %(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)
# log_cli_date_format = %Y-%m-%d %H:%M:%S

# --- Test Markers (Optional) ---
# Define custom markers to categorize tests (e.g., @pytest.mark.slow, @pytest.mark.integration).
# markers =
#     slow: marks tests as slow to run
#     integration: marks integration tests

# --- Addopts (Optional) ---
# Default command line options for pytest.
# e.g., addopts = --cov=src/readmaster_ai --cov-report=html -ra -q
#     --cov=src/readmaster_ai : Enable code coverage for the specified path.
#     --cov-report=html      : Generate HTML coverage report.
#     -ra                    : Show extra test summary information for (r)eported, (a)ll (except pass).
#     -q                     : Quiet mode, less verbose output.
addopts = -ra -q
# Consider adding --strict-markers if you use custom markers.
# Consider adding --ignore=path/to/some/tests if you want to exclude some by default.
# To run tests with HTML coverage report:
# poetry run pytest --cov=src/readmaster_ai --cov-report=html
# Then open htmlcov/index.html
