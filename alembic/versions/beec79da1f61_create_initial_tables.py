"""create_initial_tables

Revision ID: beec79da1f61
Revises:
Create Date: YYYY-MM-DD HH:MM:SS.SSSSSS # Will be auto-filled by Alembic if generated from scratch, placeholder here

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
# Import PG_UUID and JSONB if they were used directly in op.create_table columns,
# but for raw SQL execution, they are part of the SQL string.
# For this manual script, we are mostly using op.execute() with raw SQL.


# revision identifiers, used by Alembic.
revision: str = 'beec79da1f61'
down_revision: Union[str, None] = None # This is the first migration
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    # Create Enum Types using PL/pgSQL for compatibility with PostgreSQL < 9.6
    op.execute("""
    DO $$
    BEGIN
        IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'user_role_enum') THEN
            CREATE TYPE user_role_enum AS ENUM ('student', 'parent', 'teacher', 'admin');
        END IF;
    END$$;
    """)
    op.execute("""
    DO $$
    BEGIN
        IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'assessment_status_enum') THEN
            CREATE TYPE assessment_status_enum AS ENUM ('pending_audio', 'processing', 'completed', 'error');
        END IF;
    END$$;
    """)
    op.execute("""
    DO $$
    BEGIN
        IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'difficulty_level_enum') THEN
            CREATE TYPE difficulty_level_enum AS ENUM ('beginner', 'intermediate', 'advanced');
        END IF;
    END$$;
    """)
    op.execute("""
    DO $$
    BEGIN
        IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'notification_type_enum') THEN
            CREATE TYPE notification_type_enum AS ENUM ('assignment', 'result', 'feedback', 'system');
        END IF;
    END$$;
    """)

    # Create Tables (ensure correct order for Foreign Keys if not using DEFERRABLE)
    # Assuming PostgreSQL >= 9.1 for CREATE TABLE IF NOT EXISTS
    # Assuming PostgreSQL >= 9.5 for CREATE INDEX IF NOT EXISTS

    # Users Table
    op.execute("""
    CREATE TABLE IF NOT EXISTS "Users" (
        user_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        email VARCHAR UNIQUE NOT NULL,
        password_hash VARCHAR NOT NULL,
        first_name VARCHAR,
        last_name VARCHAR,
        role user_role_enum NOT NULL,
        created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
        preferred_language VARCHAR DEFAULT 'en'
    );
    """)
    op.execute("""CREATE INDEX IF NOT EXISTS idx_users_email ON "Users" (email);""")
    op.execute("""CREATE INDEX IF NOT EXISTS idx_users_role ON "Users" (role);""")

    # Classes Table
    op.execute("""
    CREATE TABLE IF NOT EXISTS "Classes" (
        class_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        class_name VARCHAR NOT NULL,
        grade_level VARCHAR,
        created_by_teacher_id UUID REFERENCES "Users"(user_id),
        created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
    );
    """)
    op.execute("""CREATE INDEX IF NOT EXISTS idx_classes_created_by ON "Classes" (created_by_teacher_id);""")

    # Readings Table
    op.execute("""
    CREATE TABLE IF NOT EXISTS "Readings" (
        reading_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        title VARCHAR NOT NULL,
        content_text TEXT,
        content_image_url VARCHAR,
        age_category VARCHAR,
        difficulty_level difficulty_level_enum,
        language VARCHAR DEFAULT 'en',
        genre VARCHAR,
        added_by_admin_id UUID REFERENCES "Users"(user_id),
        created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
    );
    """)
    op.execute("""CREATE INDEX IF NOT EXISTS idx_readings_language ON "Readings" (language);""")
    op.execute("""CREATE INDEX IF NOT EXISTS idx_readings_difficulty ON "Readings" (difficulty_level);""")
    op.execute("""CREATE INDEX IF NOT EXISTS idx_readings_added_by ON "Readings" (added_by_admin_id);""")

    # Assessments Table
    op.execute("""
    CREATE TABLE IF NOT EXISTS "Assessments" (
        assessment_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        student_id UUID NOT NULL REFERENCES "Users"(user_id),
        reading_id UUID NOT NULL REFERENCES "Readings"(reading_id),
        assigned_by_teacher_id UUID REFERENCES "Users"(user_id),
        audio_file_url VARCHAR,
        audio_duration_seconds INTEGER,
        status assessment_status_enum NOT NULL DEFAULT 'pending_audio',
        assessment_date TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
        ai_raw_speech_to_text TEXT,
        updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
    );
    """)
    op.execute("""CREATE INDEX IF NOT EXISTS idx_assessment_student_date ON "Assessments" (student_id, assessment_date);""")
    op.execute("""CREATE INDEX IF NOT EXISTS idx_assessment_status ON "Assessments" (status);""")
    op.execute("""CREATE INDEX IF NOT EXISTS idx_assessment_reading_id ON "Assessments" (reading_id);""")
    op.execute("""CREATE INDEX IF NOT EXISTS idx_assessment_assigned_by ON "Assessments" (assigned_by_teacher_id);""")

    # AssessmentResults Table
    op.execute("""
    CREATE TABLE IF NOT EXISTS "AssessmentResults" (
        result_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        assessment_id UUID NOT NULL UNIQUE REFERENCES "Assessments"(assessment_id) ON DELETE CASCADE,
        analysis_data JSONB,
        comprehension_score FLOAT,
        created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
    );
    """)
    op.execute("""CREATE INDEX IF NOT EXISTS idx_assessmentresults_assessment_id ON "AssessmentResults" (assessment_id);""")

    # QuizQuestions Table
    op.execute("""
    CREATE TABLE IF NOT EXISTS "QuizQuestions" (
        question_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        reading_id UUID NOT NULL REFERENCES "Readings"(reading_id) ON DELETE CASCADE,
        question_text TEXT NOT NULL,
        options JSONB,
        correct_option_id VARCHAR NOT NULL,
        language VARCHAR DEFAULT 'en',
        added_by_admin_id UUID REFERENCES "Users"(user_id),
        created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
    );
    """)
    op.execute("""CREATE INDEX IF NOT EXISTS idx_quizquestions_reading_id ON "QuizQuestions" (reading_id);""")
    op.execute("""CREATE INDEX IF NOT EXISTS idx_quizquestions_language ON "QuizQuestions" (language);""")

    # StudentQuizAnswers Table
    op.execute("""
    CREATE TABLE IF NOT EXISTS "StudentQuizAnswers" (
        answer_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        assessment_id UUID NOT NULL REFERENCES "Assessments"(assessment_id) ON DELETE CASCADE,
        question_id UUID NOT NULL REFERENCES "QuizQuestions"(question_id) ON DELETE CASCADE,
        student_id UUID NOT NULL REFERENCES "Users"(user_id),
        selected_option_id VARCHAR NOT NULL,
        is_correct BOOLEAN,
        answered_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
    );
    """)
    op.execute("""CREATE INDEX IF NOT EXISTS idx_studentquizanswers_assessment_id ON "StudentQuizAnswers" (assessment_id);""")
    op.execute("""CREATE INDEX IF NOT EXISTS idx_studentquizanswers_question_id ON "StudentQuizAnswers" (question_id);""")
    op.execute("""CREATE INDEX IF NOT EXISTS idx_studentquizanswers_student_id ON "StudentQuizAnswers" (student_id);""")

    # Students_Classes Association Table
    op.execute("""
    CREATE TABLE IF NOT EXISTS "Students_Classes" (
        student_id UUID NOT NULL REFERENCES "Users"(user_id) ON DELETE CASCADE,
        class_id UUID NOT NULL REFERENCES "Classes"(class_id) ON DELETE CASCADE,
        joined_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
        PRIMARY KEY (student_id, class_id)
    );
    """)

    # Parents_Students Association Table
    op.execute("""
    CREATE TABLE IF NOT EXISTS "Parents_Students" (
        parent_id UUID NOT NULL REFERENCES "Users"(user_id) ON DELETE CASCADE,
        student_id UUID NOT NULL REFERENCES "Users"(user_id) ON DELETE CASCADE,
        relationship_type VARCHAR,
        linked_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
        PRIMARY KEY (parent_id, student_id)
    );
    """)

    # Teachers_Classes Association Table
    op.execute("""
    CREATE TABLE IF NOT EXISTS "Teachers_Classes" (
        teacher_id UUID NOT NULL REFERENCES "Users"(user_id) ON DELETE CASCADE,
        class_id UUID NOT NULL REFERENCES "Classes"(class_id) ON DELETE CASCADE,
        assigned_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
        PRIMARY KEY (teacher_id, class_id)
    );
    """)

    # ProgressTracking Table
    op.execute("""
    CREATE TABLE IF NOT EXISTS "ProgressTracking" (
        progress_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        student_id UUID NOT NULL REFERENCES "Users"(user_id) ON DELETE CASCADE,
        metric_type VARCHAR NOT NULL,
        value FLOAT NOT NULL,
        period_start_date DATE,
        period_end_date DATE,
        last_calculated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
    );
    """)
    op.execute("""CREATE INDEX IF NOT EXISTS idx_progresstracking_student_metric ON "ProgressTracking" (student_id, metric_type);""")

    # Notifications Table
    op.execute("""
    CREATE TABLE IF NOT EXISTS "Notifications" (
        notification_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        user_id UUID NOT NULL REFERENCES "Users"(user_id) ON DELETE CASCADE,
        type notification_type_enum NOT NULL,
        message TEXT NOT NULL,
        related_entity_id UUID,
        is_read BOOLEAN DEFAULT FALSE NOT NULL,
        created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
    );
    """)
    op.execute("""CREATE INDEX IF NOT EXISTS idx_notifications_user_id ON "Notifications" (user_id);""")
    op.execute("""CREATE INDEX IF NOT EXISTS idx_notifications_is_read ON "Notifications" (is_read);""")

    # Trigger function and Triggers
    op.execute("""
    CREATE OR REPLACE FUNCTION trigger_set_timestamp()
    RETURNS TRIGGER AS $$
    BEGIN
      NEW.updated_at = NOW();
      RETURN NEW;
    END;
    $$ LANGUAGE plpgsql;
    """)

    trigger_tables = ["Users", "Classes", "Readings", "Assessments"]
    for table in trigger_tables:
        trigger_name = f"set_{table.lower()}_updated_at" # e.g. set_users_updated_at
        # Ensure trigger names are valid and table names are quoted if they contain uppercase letters
        op.execute(f"""DROP TRIGGER IF EXISTS {trigger_name} ON "{table}";""")
        op.execute(f"""CREATE TRIGGER {trigger_name} BEFORE UPDATE ON "{table}" FOR EACH ROW EXECUTE FUNCTION trigger_set_timestamp();""")

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Drop tables in reverse order of creation (considering dependencies)
    # Drop Triggers first
    trigger_tables = ["Assessments", "Readings", "Classes", "Users"] # Reverse order for safety
    for table in trigger_tables:
        trigger_name = f"set_{table.lower()}_updated_at"
        op.execute(f"""DROP TRIGGER IF EXISTS {trigger_name} ON "{table}";""")

    op.execute("""DROP FUNCTION IF EXISTS trigger_set_timestamp();""")

    # Drop Tables (DROP TABLE IF EXISTS is widely supported, PG 8.2+)
    op.execute("""DROP TABLE IF EXISTS "Notifications";""")
    op.execute("""DROP TABLE IF EXISTS "ProgressTracking";""")
    op.execute("""DROP TABLE IF EXISTS "Teachers_Classes";""")
    op.execute("""DROP TABLE IF EXISTS "Parents_Students";""")
    op.execute("""DROP TABLE IF EXISTS "Students_Classes";""")
    op.execute("""DROP TABLE IF EXISTS "StudentQuizAnswers";""")
    op.execute("""DROP TABLE IF EXISTS "QuizQuestions";""")
    op.execute("""DROP TABLE IF EXISTS "AssessmentResults";""")
    op.execute("""DROP TABLE IF EXISTS "Assessments";""")
    op.execute("""DROP TABLE IF EXISTS "Readings";""")
    op.execute("""DROP TABLE IF EXISTS "Classes";""")
    op.execute("""DROP TABLE IF EXISTS "Users";""")

    # Drop Enum Types (DROP TYPE IF EXISTS is widely supported, PG 8.2+)
    op.execute("""DROP TYPE IF EXISTS notification_type_enum;""")
    op.execute("""DROP TYPE IF EXISTS difficulty_level_enum;""")
    op.execute("""DROP TYPE IF EXISTS assessment_status_enum;""")
    op.execute("""DROP TYPE IF EXISTS user_role_enum;""")
    # ### end Alembic commands ###